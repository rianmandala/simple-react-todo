{"version":3,"sources":["component/Form.js","component/Todo.js","component/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","inputText","todos","setTodos","setFilterTodo","filterTodo","onSubmit","event","preventDefault","currentTodos","text","completed","id","parseInt","Math","random","localStorage","setItem","JSON","stringify","className","onChange","title","target","value","type","icon","faPlus","name","Todo","todo","onClick","map","item","faCheck","filter","faTrash","TodoList","key","App","useState","getItem","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.31c16701.chunk.js","sourcesContent":["import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faPlus} from '@fortawesome/free-solid-svg-icons'\n\nconst Form = ({setInputText, inputText, todos, setTodos, setFilterTodo, filterTodo}) => {\n\n  const inputTextHandler = ({target:title})=>{\n    setInputText(title.value)\n  }\n\n  const submitFormHandler = (event)=>{\n    event.preventDefault()\n    const currentTodos = [...todos,{text:inputText, completed: false, id: parseInt(Math.random()*1000)}]\n    setTodos(currentTodos)\n    setInputText('')\n    localStorage.setItem('todos', JSON.stringify(currentTodos))\n  }\n\n  const filterTodoHandler = (event) => {\n    setFilterTodo(event.target.value)\n  }\n\n  return (\n    <form onSubmit={submitFormHandler} className=\"form-todo\">\n      <div className=\"container-todo-input\">\n        <input onChange={inputTextHandler} value={inputText} type=\"text\" className=\"todo-input\"/>\n        <button className=\"todo-button\" type=\"submit\">\n          <FontAwesomeIcon icon={faPlus} className=\"plus-icon\" />\n        </button>\n      </div>\n      <div className=\"select\">\n        <select onChange={filterTodoHandler} name=\"todos\" value={filterTodo} className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  )\n}\n\nexport default Form;","import React from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faCheck, faTrash} from '@fortawesome/free-solid-svg-icons'\n\nconst Todo = ({todo, todos, setTodos})=> {\n  const deleteHandler = () => {\n    setTodos(todos.filter(item => item.id !== todo.id));\n  }\n  const completeHandler = () => {\n    setTodos(todos.map(item => {\n      if(item.id === todo.id){\n        return {\n          ...todo, completed: !todo.completed\n        };\n      }\n      return item;\n    }))\n  }\n  return (\n    <div className=\"todo\">\n      <li className={`todo-item ${todo.completed ? 'completed': ''}`}>{todo.text}</li>\n      <button className=\"complete-btn\" onClick={completeHandler}>\n        <FontAwesomeIcon icon={faCheck} />\n      </button>\n      <button className=\"trash-btn\" onClick={deleteHandler}>\n        <FontAwesomeIcon icon={faTrash} />\n      </button>\n    </div>\n  )\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo'\n\nconst TodoList = ({filterTodo, todos,setTodos}) => {\n  return (\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\">\n        {\n          todos.filter(todo => {\n            if(filterTodo === 'completed'){\n              return todo.completed\n            } else if(filterTodo === 'uncompleted'){\n              return !todo.completed\n            }\n            return todo\n          }).map(todo => <Todo key={todo.id} todos={todos} todo={todo} setTodos={setTodos} />)\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default TodoList;","import React, {useState} from 'react';\nimport './App.css';\nimport Form from './component/Form'\nimport TodoList from './component/TodoList'\n\nfunction App() {\n\n  const getTodosFromStoragehandler = () => {\n    if(!localStorage.getItem('todos')){\n      localStorage.setItem('todos',[])\n      return []\n    }\n    const todos = JSON.parse(localStorage.getItem('todos'));\n    return todos;\n  }\n\n  const [inputText, setInputText] = useState('')\n  const [todos, setTodos] = useState(getTodosFromStoragehandler)\n  const [filterTodo, setFilterTodo] = useState('all')\n\n  return (\n    <div className=\"App\">\n      <header>\n      <h1 className=\"title\">Simple Todo List</h1>\n      </header>\n      <Form todos={todos} setTodos={setTodos}  \n            inputText={inputText}  setInputText={setInputText} \n            setFilterTodo={setFilterTodo}\n            filterTodo={filterTodo}\n      />\n      <TodoList filterTodo={filterTodo} todos={todos} setTodos={setTodos} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}